{"version":3,"sources":["App.js","components/StateInput.js","components/CorrectInputs.js","serviceWorker.js","index.js"],"names":["typingTimer","StateInput","_ref","correct","number","feedback","props","Object","objectWithoutProperties","react_default","a","createElement","style","marginTop","marginBottom","InputGroup","InputGroupAddon","addonType","toString","Input","invalid","className","valid","iconStyle","fontSize","marginRight","CorrectInput","Button","onClick","this","onShowToggle","color","open","fa","children","length","Collapse","isOpen","React","Component","styles","container","localStorageKey","freshState","said","stateInputs","states","_","forEach","push","value","createStateInputs","correctInputs","showCorrect","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","bind","assertThisInitialized","isInputAState","createInput","handleInputKeyDown","handleInputKeyUp","handleResetClick","handleInputToggle","savedState","localStorage","getItem","state","JSON","parse","input","key","toUpperCase","setState","prevState","update","$set","index","_this2","e","target","defineProperty","setItem","stringify","window","confirm","removeItem","_this3","trim","clearTimeout","setTimeout","hasInputBeenSaid","correctInput","$push","$splice","onChange","onKeyDown","onKeyUp","disabled","Container","Row","Col","xs","CorrectInputs_CorrectInput","map","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a46831d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport StateInput from './components/StateInput';\nimport _ from 'lodash';\nimport update from 'immutability-helper';\nimport states from './states';\nimport CorrectInputs from './components/CorrectInputs';\n\nlet typingTimer;\nlet typingTimeout = 500;\n\nfunction createStateInputs(states) {\n  const stateInputs = [];\n\n  _.forEach(states, () => {\n    stateInputs.push({\n      value: '',\n      valid: false,\n      invalid: false,\n      feedback: '',\n      correct: false,\n    });\n  });\n\n  return stateInputs;\n}\n\nconst styles = {\n  container: {\n    marginTop: 20,\n    marginBottom: 20,\n  },\n};\n\nconst localStorageKey = 'savedState';\n\nconst freshState = {\n  said: [],\n  stateInputs: createStateInputs(states),\n  correctInputs: [],\n  showCorrect: false,\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.isInputAState = this.isInputAState.bind(this);\n    this.createInput = this.createInput.bind(this);\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n    this.handleInputKeyUp = this.handleInputKeyUp.bind(this);\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.handleInputToggle = this.handleInputToggle.bind(this);\n\n    const savedState = localStorage.getItem(localStorageKey);\n\n    this.state = savedState === null ? freshState : JSON.parse(savedState);\n    this.state.showCorrect = false;\n\n  }\n\n  hasInputBeenSaid(input) {\n    let said = false;\n    this.state.said.forEach(value => {\n      if (value === input) {\n        said = true;\n      }\n    });\n    return said;\n  }\n\n  isInputAState(input) {\n    for (const key in states) {\n      if (states[input] !== void 0 || states[key].toUpperCase() === input) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  handleInputToggle() {\n    this.setState(prevState => update(prevState, {\n      showCorrect: { $set: !prevState.showCorrect },\n    }));\n  }\n\n  handleInputChange(index) {\n    return e => {\n      const input = e.target.value.toUpperCase();\n      this.setState((prevState) => update(prevState, {\n        stateInputs: { [index]: { value: { $set: input }}}\n      }));\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(localStorageKey, JSON.stringify(this.state));\n  }\n\n  handleResetClick() {\n    if (window.confirm('Are you sure?')) {\n      this.setState(freshState);\n      localStorage.removeItem(localStorageKey);\n    }\n  }\n\n  handleInputKeyUp(index) {\n    return e => {\n      let input = e.target.value.toUpperCase().trim();\n      if (input === '') {\n        this.setState(prevState => update(prevState, {\n          stateInputs: { [index]: {\n            invalid: { $set: false },\n            valid: { $set: false },\n            feedback: { $set: '' }\n          }}\n        }));\n      } else {\n        clearTimeout(typingTimer);\n        typingTimer = setTimeout(() => {\n          if (input.length > 2) {\n            for (let key in states) {\n              if (states[key].toUpperCase() === input) {\n                input = key;\n              }\n            }\n          }\n          const isInputAState = this.isInputAState(input);\n          const hasInputBeenSaid = this.hasInputBeenSaid(input);\n          if (!isInputAState) {\n            this.setState(prevState => update(prevState, {\n              stateInputs: { [index]: {\n                invalid: { $set: true },\n                valid: { $set: false },\n                feedback: { $set: 'Not a state' },\n                correct: { $set: false },\n              }}\n            }));\n          } else if (hasInputBeenSaid) {\n            this.setState(prevState => update(prevState, {\n              stateInputs: { [index]: {\n                invalid: { $set: true },\n                valid: { $set: false },\n                feedback: { $set: 'Drink' },\n                correct: { $set: false },\n              }}\n            }));\n          } else {\n            this.setState(prevState => update(prevState, {\n              stateInputs: { [index]: {\n                valid: { $set: true },\n                invalid: { $set: false },\n                feedback: { $set: states[input] },\n                correct: { $set: false },\n              }}\n            }));\n            const correctInput = {\n              value: input,\n              valid: true,\n              invalid: false,\n              feedback: states[input],\n              correct: true,\n            };\n            setTimeout(() => {\n              this.setState(prevState => update(prevState, {\n                correctInputs: { $push: [correctInput] },\n                stateInputs: {\n                  $splice: [[index, 1]],\n                },\n                said: { $push: [input] }\n              }));\n            }, typingTimeout);\n          }\n        }, typingTimeout);\n      }\n    }\n  }\n\n  handleInputKeyDown() {\n    clearTimeout(typingTimer);\n  }\n\n  createInput(input, index) {\n    return (\n      <StateInput\n        key={index}\n        number={(input.correct ? index : index + this.state.correctInputs.length) + 1}\n        value={input.value}\n        invalid={input.invalid}\n        valid={input.valid}\n        onChange={this.handleInputChange(index)}\n        onKeyDown={this.handleInputKeyDown}\n        onKeyUp={this.handleInputKeyUp(index)}\n        feedback={input.feedback}\n        disabled={input.correct}\n        correct={input.correct}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <Container style={styles.container}>\n        <Row>\n          <Col xs={12}>\n            <Button onClick={this.handleResetClick} className=\"float-right\">Reset</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <hr />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <CorrectInputs open={this.state.showCorrect} onShowToggle={this.handleInputToggle}>\n              {this.state.correctInputs.map(this.createInput)}\n            </CorrectInputs>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n              {this.state.stateInputs.map(this.createInput)}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Input, InputGroup, InputGroupAddon } from 'reactstrap';\n\nexport default ({ correct, number, feedback, ...props }) => (\n  <div>\n    <div style={correct ? { marginTop: 10 } : { marginBottom: 10 }}>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">{number.toString()}</InputGroupAddon>\n        <Input {...props} /> \n      </InputGroup>\n      {props.invalid && (\n        <div className=\"text-danger\">{feedback}</div>\n      )}\n      {props.valid && (\n        <div className=\"text-success\">{feedback}</div>\n      )}\n    </div>\n  </div>\n);","import React from 'react';\nimport { Button, Collapse } from 'reactstrap';\nimport { FaCaretDown, FaCaretUp } from 'react-icons/fa';\n\nconst iconStyle = {\n  fontSize: 23,\n  marginRight: 5,\n  marginBottom: 4,\n};\n\nexport default class CorrectInput extends React.Component {\n  render() {\n    return (\n      <div>\n        <Button onClick={this.props.onShowToggle} color=\"link\">\n          {this.props.open ? <FaCaretUp style={iconStyle} /> : <FaCaretDown style={iconStyle} />}\n          Correct: {this.props.children.length}\n        </Button>\n        <Collapse isOpen={this.props.open}>\n          {this.props.children}\n        </Collapse>\n        <hr />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}